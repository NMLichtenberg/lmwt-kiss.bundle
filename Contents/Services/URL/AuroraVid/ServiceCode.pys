# WholeCloud
#
import time
####################################################################################################
def NormalizeURL(url):

	url =  url.split('?')[0]
	url = url.replace('novamov.com', 'auroravid.to')

	return url

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)

	title = html.xpath('//meta[@property="og:title"]/@content')[0].split('Watch ')[-1].split(' online ')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]

	return VideoClipObject(
		title = title,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_resolution = 'sd',
			audio_channels = 2,
			optimized_for_streaming = False,
			parts = [
				PartObject(key=Callback(PlayVideo, url=url))
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	html = HTML.ElementFromURL(url)
	post_values = {}

	for item in html.xpath('//form[@method="post"]/input'):

		name = item.get('name')
		value = item.get('value')
		post_values[name] = value

	time.sleep(1)

	page = HTTP.Request(url, values=post_values, method='POST').content
	html = HTML.ElementFromString(page)

	src = html.xpath('//source[contains(@src, ".mp4")]/@src')

	if len(src) > 0:
		return IndirectResponse(VideoClipObject, key=src[0])

	raise Ex.MediaNotAvailable
